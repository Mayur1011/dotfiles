{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"STARTER": {
		"prefix": "cpp",
		"body": [
			"/*",
			"Created by :- Mayur",
			"*/",
			"#include <bits/stdc++.h>",
			"#include <chrono>",
			"#define mayur_local",
			"",
			"using namespace std;",
			"",
			"template <typename T, typename = void>",
			"struct is_iterable : false_type",
			"{",
			"};",
			"template <typename T>",
			"struct is_iterable<T, void_t<decltype(begin(declval<T>())), decltype(end(declval<T>()))>> : true_type",
			"{",
			"};",
			"template <typename T>",
			"typename enable_if<is_iterable<T>::value && !is_same<T, string>::value, ostream &>::type operator<<(ostream &cout, T const &v);",
			"template <typename A, typename B>",
			"ostream &operator<<(ostream &cout, pair<A, B> const &p) { return cout << \"(\" << p.f << \", \" << p.s << \")\"; }",
			"template <typename T>",
			"typename enable_if<is_iterable<T>::value && !is_same<T, string>::value, ostream &>::type operator<<(ostream &cout, T const &v)",
			"{",
			"\tcout << \"[\";",
			"\tfor (auto it = v.begin(); it != v.end();)",
			"\t{",
			"\t\tcout << *it;",
			"\t\tif (++it != v.end())",
			"\t\t\tcout << \", \";",
			"\t}",
			"\treturn cout << \"]\";",
			"}",
			"template <typename A, typename B>",
			"istream &operator>>(istream &cin, pair<A, B> &p)",
			"{",
			"\tcin >> p.first;",
			"\treturn cin >> p.second;",
			"}",
			"",
			"template <typename T>",
			"void debug(string s, T x) { cerr << \"\\033[1;34m\" << s << \"\\033[0;32m = \" << x << \"\\033[0m\\n\"; }",
			"template <typename T, typename... Args>",
			"void debug(string s, T x, Args... args)",
			"{",
			"\tfor (int i = 0, b = 0; i < (int)s.size(); i++)",
			"\t\tif (s[i] == '(' || s[i] == '{')",
			"\t\t\tb++;",
			"\t\telse if (s[i] == ')' || s[i] == '}')",
			"\t\t\tb--;",
			"\t\telse if (s[i] == ',' && b == 0)",
			"\t\t{",
			"\t\t\tcerr << \"\\033[1;34m\" << s.substr(0, i) << \"\\033[0;32m = \" << x << \"\\033[31m | \";",
			"\t\t\tdebug(s.substr(s.find_first_not_of(' ', i + 1)), args...);",
			"\t\t\tbreak;",
			"\t\t}",
			"}",
			"template <typename T>",
			"void debug_nameless(T x) { cerr << \"\\033[35m\" << x << \"\\033[0m\\n\"; }",
			"template <typename T, typename... Args>",
			"void debug_nameless(T x, Args... args)",
			"{",
			"\tcerr << \"\\033[35m\" << x << \"\\033[31m | \";",
			"\tdebug_nameless(args...);",
			"}",
			"",
			"#ifdef mayur_local",
			"#define pr(...) debug(#__VA_ARGS__, __VA_ARGS__)",
			"#define prs(...) debug_nameless(__VA_ARGS__)",
			"const bool local_ = true;",
			"#else",
			"#define pr(...) 135",
			"#define prs(...) 135",
			"const bool local_ = false;",
			"#endif",
			"int main()",
			"{",
			"#ifdef mayur_local",
			"auto begin = std::chrono::high_resolution_clock::now();",
			"#endif",
			"\tstd::ios_base::sync_with_stdio(false);",
			"\tstd::cin.tie(nullptr);",
			"\tint tt = 1;",
			"\t//std::cin >> tt;",
			"\twhile(tt--){",
			"\t\t$1",
			"\t",
			"",
			"",
			"",
			"\t}",
			"#ifdef mayur_local",
			"auto end = std::chrono::high_resolution_clock::now();",
			"cerr << setprecision(4) << fixed;",
			"cerr << \"Execution time: \" << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << \" seconds\" << endl;",
			"#endif",
			"\t return 0;",
			"}"
		],
		"description": "starter template"
	},
	"GRAPH": {
		"prefix": "graph",
		"body": [
			"class Graph",
			"{",
			"int V;",
			"// list<int> *adj;",
			"vector<int> *adj;", //another way to represent array
			"public:",
			"Graph()",
			"{",
			"    V = 0;",
			"}",
			"Graph(int v)",
			"{",
			"    this->V = v;",
			"    // adj = new list<int>[V + 5];",
			"adj = new vector<int>[V + 5];",
			"}",
			"void addEdge(int v, int w)",
			"{",
			"\tadj[v].push_back(w);",
			"\tadj[w].push_back(v); // comment this line for directed graph",
			"}",
			"void printGraph()",
			"{",
			"    for (int v = 1; v <= V; ++v)",
			"{",
			"cout << \"\\n Adjacency list of vertex \" << v << \": head \";",
			"for (auto x : adj[v])",
			"cout << \"-> \" << x;",
			"printf(\"\\n\");",
			"}",
			"}",
			"};",
		],
		"description": "Graph template"
	},
	"TREE": {
		"prefix": "tree",
		"body": [
			"template <typename T>",
			"class TreeNode",
			"{",
			"public:",
			"    T val;",
			"    TreeNode<T> *left;",
			"    TreeNode<T> *right;",
			"",
			"    TreeNode() : val(0), left(NULL), right(NULL) {}",
			"TreeNode(T x) : val(x), left(NULL), right(NULL) {}",
			"TreeNode(T x, TreeNode<T> *left, TreeNode<T> *right) : val(x), left(left), right(right) {}",
			"};",
		],
		"description": "tree"
	}
}